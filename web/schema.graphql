schema {
  query: RootQuery
}

type RootQuery {
  Person(
    """Person document ID"""
    id: ID!
  ): Person
  Page(
    """Page document ID"""
    id: ID!
  ): Page
  Post(
    """Post document ID"""
    id: ID!
  ): Post
  SiteSettings(
    """SiteSettings document ID"""
    id: ID!
  ): SiteSettings
  SanityImageAsset(
    """SanityImageAsset document ID"""
    id: ID!
  ): SanityImageAsset
  SanityFileAsset(
    """SanityFileAsset document ID"""
    id: ID!
  ): SanityFileAsset
  allPerson(
    where: PersonFilter
    sort: [PersonSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Person!]!
  allPage(
    where: PageFilter
    sort: [PageSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Page!]!
  allPost(
    where: PostFilter
    sort: [PostSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [Post!]!
  allSiteSettings(
    where: SiteSettingsFilter
    sort: [SiteSettingsSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [SiteSettings!]!
  allSanityImageAsset(
    where: SanityImageAssetFilter
    sort: [SanityImageAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [SanityImageAsset!]!
  allSanityFileAsset(
    where: SanityFileAssetFilter
    sort: [SanityFileAssetSorting!]

    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
  ): [SanityFileAsset!]!
}

type Person implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  name: String
  title: String
  phone: String
  email: String
  image: Image
}

"""A Sanity document"""
interface Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
}

type SanityImageAsset implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  metadata: SanityImageMetadata
  source: SanityAssetSourceData
}

type SanityImageMetadata {
  _key: String
  _type: String
  location: Geopoint
  dimensions: SanityImageDimensions
  palette: SanityImagePalette
  lqip: String
  hasAlpha: Boolean
  isOpaque: Boolean
}

type Geopoint {
  _key: String
  _type: String
  lat: Float
  lng: Float
  alt: Float
}

type SanityImageDimensions {
  _key: String
  _type: String
  height: Float
  width: Float
  aspectRatio: Float
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

type SanityAssetSourceData {
  _key: String
  _type: String

  """A canonical name for the source this asset is originating from"""
  name: String

  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String

  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}

type SanityImageHotspot {
  _key: String
  _type: String
  x: Float
  y: Float
  height: Float
  width: Float
}

type SanityImageCrop {
  _key: String
  _type: String
  top: Float
  bottom: Float
  left: Float
  right: Float
}

type Page implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String

  """Title of the page"""
  title: String
  slug: Slug
  content: [GridBlockOrImageBlockOrTextBlock]
}

type Slug {
  _key: String
  _type: String
  current: String
}

union GridBlockOrImageBlockOrTextBlock = GridBlock | ImageBlock | TextBlock

type GridBlock {
  _key: String
  _type: String
  title: String
  columns: Columns
  items: [Cell]
}

type Columns {
  _key: String
  _type: String

  """Items per row for phone"""
  small: String

  """Items per row for tablet"""
  medium: String

  """Items per row for desktop"""
  large: String
}

type Cell {
  _key: String
  _type: String
  title: String
  image: Image

  """Important for SEO and accessiblity."""
  alt: String
  text: TextBlock
}

type TextBlock {
  _key: String
  _type: String
  textRaw: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ImageBlock {
  _key: String
  _type: String
  caption: String

  """Important for SEO and accessiblity."""
  alt: String
  layout: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
}

type Post implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String

  """Title of the page"""
  title: String
  slug: Slug

  """Select author for post"""
  author: Person

  """You can use this field to schedule post where you show them"""
  publishedAt: DateTime
  keywords: [String]
  excerpt: SimpleTextBlock
  content: [GridBlockOrImageBlockOrTextBlock]
}

type SimpleTextBlock {
  _key: String
  _type: String
  textRaw: JSON
}

type SiteSettings implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String

  """Title of the page"""
  title: String

  """Description for search engines and social media."""
  description: String
  keywords: [String]
  navigation: [ExternalLinkOrInternalLink]
  socialFields: SocialFields
}

union ExternalLinkOrInternalLink = ExternalLink | InternalLink

type ExternalLink {
  _key: String
  _type: String
  title: String
  slug: Slug
}

type InternalLink {
  _key: String
  _type: String
  title: String
  link: Page
}

type SocialFields {
  _key: String
  _type: String
  twitter: String
  instagram: String
  facebook: String
}

type SanityFileAsset implements Document {
  """Document ID"""
  _id: ID

  """Document type"""
  _type: String

  """Date the document was created"""
  _createdAt: DateTime

  """Date the document was last modified"""
  _updatedAt: DateTime

  """Current document revision"""
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  source: SanityAssetSourceData
}

input PersonFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  name: StringFilter
  title: StringFilter
  phone: StringFilter
  email: StringFilter
  image: ImageFilter
}

input DocumentFilter {
  """All documents referencing the given document ID."""
  references: ID

  """All documents that are drafts."""
  is_draft: Boolean
}

input IDFilter {
  """Checks if the value is equal to the given input."""
  eq: ID

  """Checks if the value is not equal to the given input."""
  neq: ID

  """Checks if the value matches the given word/words."""
  matches: ID
  in: [ID!]
  nin: [ID!]
}

input StringFilter {
  """Checks if the value is equal to the given input."""
  eq: String

  """Checks if the value is not equal to the given input."""
  neq: String

  """Checks if the value matches the given word/words."""
  matches: String
  in: [String!]
  nin: [String!]
}

input DatetimeFilter {
  """Checks if the value is equal to the given input."""
  eq: DateTime

  """Checks if the value is not equal to the given input."""
  neq: DateTime

  """Checks if the value is greater than the given input."""
  gt: DateTime

  """Checks if the value is greater than or equal to the given input."""
  gte: DateTime

  """Checks if the value is lesser than the given input."""
  lt: DateTime

  """Checks if the value is lesser than or equal to the given input."""
  lte: DateTime
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  hotspot: SanityImageHotspotFilter
  crop: SanityImageCropFilter
}

input SanityImageAssetFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  path: StringFilter
  url: StringFilter
  metadata: SanityImageMetadataFilter
  source: SanityAssetSourceDataFilter
}

input FloatFilter {
  """Checks if the value is equal to the given input."""
  eq: Float

  """Checks if the value is not equal to the given input."""
  neq: Float

  """Checks if the value is greater than the given input."""
  gt: Float

  """Checks if the value is greater than or equal to the given input."""
  gte: Float

  """Checks if the value is lesser than the given input."""
  lt: Float

  """Checks if the value is lesser than or equal to the given input."""
  lte: Float
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  location: GeopointFilter
  dimensions: SanityImageDimensionsFilter
  palette: SanityImagePaletteFilter
  lqip: StringFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  alt: FloatFilter
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  aspectRatio: FloatFilter
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input BooleanFilter {
  """Checks if the value is equal to the given input."""
  eq: Boolean

  """Checks if the value is not equal to the given input."""
  neq: Boolean
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  name: StringFilter
  id: StringFilter
  url: StringFilter
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  x: FloatFilter
  y: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  top: FloatFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
}

input PersonSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  name: SortOrder
  title: SortOrder
  phone: SortOrder
  email: SortOrder
  image: ImageSorting
}

enum SortOrder {
  """Sorts on the value in ascending order."""
  ASC

  """Sorts on the value in descending order."""
  DESC
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  hotspot: SanityImageHotspotSorting
  crop: SanityImageCropSorting
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  x: SortOrder
  y: SortOrder
  height: SortOrder
  width: SortOrder
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  top: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
}

input PageFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
}

input PageSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
}

input PostFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
  author: PersonFilter
  publishedAt: DatetimeFilter
  excerpt: SimpleTextBlockFilter
}

input SimpleTextBlockFilter {
  _key: StringFilter
  _type: StringFilter
}

input PostSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
  publishedAt: SortOrder
  excerpt: SimpleTextBlockSorting
}

input SimpleTextBlockSorting {
  _key: SortOrder
  _type: SortOrder
}

input SiteSettingsFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  description: StringFilter
  socialFields: SocialFieldsFilter
}

input SocialFieldsFilter {
  _key: StringFilter
  _type: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  facebook: StringFilter
}

input SiteSettingsSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  description: SortOrder
  socialFields: SocialFieldsSorting
}

input SocialFieldsSorting {
  _key: SortOrder
  _type: SortOrder
  twitter: SortOrder
  instagram: SortOrder
  facebook: SortOrder
}

input SanityImageAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  path: SortOrder
  url: SortOrder
  metadata: SanityImageMetadataSorting
  source: SanityAssetSourceDataSorting
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  location: GeopointSorting
  dimensions: SanityImageDimensionsSorting
  palette: SanityImagePaletteSorting
  lqip: SortOrder
  hasAlpha: SortOrder
  isOpaque: SortOrder
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  lat: SortOrder
  lng: SortOrder
  alt: SortOrder
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  aspectRatio: SortOrder
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  name: SortOrder
  id: SortOrder
  url: SortOrder
}

input SanityFileAssetFilter {
  """Apply filters on document level"""
  _: DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  path: StringFilter
  url: StringFilter
  source: SanityAssetSourceDataFilter
}

input SanityFileAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  path: SortOrder
  url: SortOrder
  source: SanityAssetSourceDataSorting
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

type Block {
  _key: String
  _type: String
  children: [Span]
  style: String
  list: String
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

type Link {
  _key: String
  _type: String
  href: String
}

input IntFilter {
  """Checks if the value is equal to the given input."""
  eq: Int

  """Checks if the value is not equal to the given input."""
  neq: Int

  """Checks if the value is greater than the given input."""
  gt: Int

  """Checks if the value is greater than or equal to the given input."""
  gte: Int

  """Checks if the value is lesser than the given input."""
  lt: Int

  """Checks if the value is lesser than or equal to the given input."""
  lte: Int
}

input DateFilter {
  """Checks if the value is equal to the given input."""
  eq: Date

  """Checks if the value is not equal to the given input."""
  neq: Date

  """Checks if the value is greater than the given input."""
  gt: Date

  """Checks if the value is greater than or equal to the given input."""
  gte: Date

  """Checks if the value is lesser than the given input."""
  lt: Date

  """Checks if the value is lesser than or equal to the given input."""
  lte: Date
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input ColumnsFilter {
  _key: StringFilter
  _type: StringFilter
  small: StringFilter
  medium: StringFilter
  large: StringFilter
}

input ExternalLinkFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  slug: SlugFilter
}

input InternalLinkFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  link: PageFilter
}

input LinkFilter {
  _key: StringFilter
  _type: StringFilter
  href: StringFilter
}

input CellFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  image: ImageFilter
  alt: StringFilter
  text: TextBlockFilter
}

input TextBlockFilter {
  _key: StringFilter
  _type: StringFilter
}

input GridBlockFilter {
  _key: StringFilter
  _type: StringFilter
  title: StringFilter
  columns: ColumnsFilter
}

input ImageBlockFilter {
  _key: StringFilter
  _type: StringFilter
  caption: StringFilter
  alt: StringFilter
  layout: StringFilter
  asset: SanityImageAssetFilter
  hotspot: SanityImageHotspotFilter
  crop: SanityImageCropFilter
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input ColumnsSorting {
  _key: SortOrder
  _type: SortOrder
  small: SortOrder
  medium: SortOrder
  large: SortOrder
}

input ExternalLinkSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
  slug: SlugSorting
}

input InternalLinkSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
}

input LinkSorting {
  _key: SortOrder
  _type: SortOrder
  href: SortOrder
}

input CellSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
  image: ImageSorting
  alt: SortOrder
  text: TextBlockSorting
}

input TextBlockSorting {
  _key: SortOrder
  _type: SortOrder
}

input GridBlockSorting {
  _key: SortOrder
  _type: SortOrder
  title: SortOrder
  columns: ColumnsSorting
}

input ImageBlockSorting {
  _key: SortOrder
  _type: SortOrder
  caption: SortOrder
  alt: SortOrder
  layout: SortOrder
  hotspot: SanityImageHotspotSorting
  crop: SanityImageCropSorting
}
