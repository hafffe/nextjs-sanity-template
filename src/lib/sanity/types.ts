/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Youtube = {
  _type: "youtube";
  url?: string;
  autoPlay?: boolean;
  muted?: boolean;
};

export type Spacer = {
  _type: "spacer";
  size?: "small" | "medium" | "large" | "xlarge";
};

export type BlockContent = {
  _type: "blockContent";
  text?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal+center"
          | "h1+center"
          | "h2+center"
          | "h3+center"
          | "h4+center"
          | "h5+center"
          | "h6+center"
          | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<
          {
            _key: string;
          } & Link
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "customImage";
        _key: string;
      }
  >;
};

export type Grid = {
  _type: "grid";
  title?: string;
  columns?: Columns;
  items?: Array<
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "mainImage";
        _key: string;
      }
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & Youtube)
  >;
};

export type Link = {
  _type: "link";
  href?: string;
};

export type InternalLink = {
  _type: "internalLink";
  title?: string;
  link?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
};

export type ExternalLink = {
  _type: "externalLink";
  title?: string;
  slug?: Slug;
};

export type Columns = {
  _type: "columns";
  small?: "1" | "2" | "3" | "4";
  medium?: "1" | "2" | "3" | "4";
  large?: "1" | "2" | "3" | "4";
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  meta?: MetaFields;
  navigation?: Array<
    | ({
        _key: string;
      } & InternalLink)
    | ({
        _key: string;
      } & ExternalLink)
  >;
  socialFields?: SocialFields;
};

export type SocialFields = {
  _type: "socialFields";
  twitter?: string;
  instagram?: string;
  facebook?: string;
  youtube?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  meta?: MetaFields;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  publishedAt?: string;
  keywords?: Array<string>;
  excerpt?: SimpleBlockContent;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "mainImage";
  };
  content?: Array<
    | ({
        _key: string;
      } & Grid)
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "mainImage";
        _key: string;
      }
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & Youtube)
  >;
};

export type MainImage = {
  _type: "mainImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type SimpleBlockContent = {
  _type: "simpleBlockContent";
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<
      {
        _key: string;
      } & Link
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  meta?: MetaFields;
  content?: Array<
    | ({
        _key: string;
      } & Grid)
    | ({
        _key: string;
      } & MainImage)
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & Youtube)
  >;
};

export type MetaFields = {
  _type: "metaFields";
  metaTitle?: string;
  metaDescription?: string;
  openGraphImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  openGraphTitle?: string;
  openGraphDescription?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Person = {
  _id: string;
  _type: "person";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  phone?: string;
  email?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Youtube
  | Spacer
  | BlockContent
  | Grid
  | Link
  | InternalLink
  | ExternalLink
  | Columns
  | SiteSettings
  | SocialFields
  | Post
  | MainImage
  | SimpleBlockContent
  | Page
  | MetaFields
  | Slug
  | Person
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/lib/sanity/queries/page.ts
// Variable: pageQuery
// Query: *[_type == 'page' && slug.current == $slug][0] {    ...,    content[] {        _type == 'blockContent' => {    ...  },        _type == 'grid' => {    ...,    items[] {      ...,      ctas[] {        ...,        link->{link, slug}      }    }  },        _type == 'mainImage' => {    ...  },        _type == 'youtube' => {    ...  }    }  }
export type PageQueryResult = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  meta?: MetaFields;
  content: Array<
    | {
        _key: string;
        _type: "blockContent";
        text?: Array<
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: "span";
                _key: string;
              }>;
              style?:
                | "blockquote"
                | "h1"
                | "h1+center"
                | "h2"
                | "h2+center"
                | "h3"
                | "h3+center"
                | "h4"
                | "h4+center"
                | "h5"
                | "h5+center"
                | "h6"
                | "h6+center"
                | "normal"
                | "normal+center";
              listItem?: "bullet" | "number";
              markDefs?: Array<
                {
                  _key: string;
                } & Link
              >;
              level?: number;
              _type: "block";
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: "customImage";
              _key: string;
            }
        >;
      }
    | {
        _key: string;
        _type: "grid";
        title?: string;
        columns?: Columns;
        items: Array<
          | {
              _key: string;
              _type: "blockContent";
              text?: Array<
                | {
                    children?: Array<{
                      marks?: Array<string>;
                      text?: string;
                      _type: "span";
                      _key: string;
                    }>;
                    style?:
                      | "blockquote"
                      | "h1"
                      | "h1+center"
                      | "h2"
                      | "h2+center"
                      | "h3"
                      | "h3+center"
                      | "h4"
                      | "h4+center"
                      | "h5"
                      | "h5+center"
                      | "h6"
                      | "h6+center"
                      | "normal"
                      | "normal+center";
                    listItem?: "bullet" | "number";
                    markDefs?: Array<
                      {
                        _key: string;
                      } & Link
                    >;
                    level?: number;
                    _type: "block";
                    _key: string;
                  }
                | {
                    asset?: {
                      _ref: string;
                      _type: "reference";
                      _weak?: boolean;
                      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                    };
                    hotspot?: SanityImageHotspot;
                    crop?: SanityImageCrop;
                    alt?: string;
                    _type: "customImage";
                    _key: string;
                  }
              >;
              ctas: null;
            }
          | {
              asset?: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              alt?: string;
              _type: "mainImage";
              _key: string;
              ctas: null;
            }
          | {
              _key: string;
              _type: "youtube";
              url?: string;
              autoPlay?: boolean;
              muted?: boolean;
              ctas: null;
            }
        > | null;
      }
    | {
        _key: string;
        _type: "mainImage";
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
      }
    | {
        _key: string;
        _type: "youtube";
        url?: string;
        autoPlay?: boolean;
        muted?: boolean;
      }
    | {}
  > | null;
} | null;
// Variable: pageWithPostsQuery
// Query: {    "page": *[_type == 'page' && slug.current == $slug][0] {      ...,      content[] {          _type == 'blockContent' => {    ...  },          _type == 'grid' => {    ...,    items[] {      ...,      ctas[] {        ...,        link->{link, slug}      }    }  },          _type == 'mainImage' => {    ...  },          _type == 'youtube' => {    ...  }      }    },    "posts": *[_type == 'post' && defined(slug.current)] | order(_createdAt desc)[0...$limit]  }
export type PageWithPostsQueryResult = {
  page: {
    _id: string;
    _type: "page";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    meta?: MetaFields;
    content: Array<
      | {
          _key: string;
          _type: "blockContent";
          text?: Array<
            | {
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: "span";
                  _key: string;
                }>;
                style?:
                  | "blockquote"
                  | "h1"
                  | "h1+center"
                  | "h2"
                  | "h2+center"
                  | "h3"
                  | "h3+center"
                  | "h4"
                  | "h4+center"
                  | "h5"
                  | "h5+center"
                  | "h6"
                  | "h6+center"
                  | "normal"
                  | "normal+center";
                listItem?: "bullet" | "number";
                markDefs?: Array<
                  {
                    _key: string;
                  } & Link
                >;
                level?: number;
                _type: "block";
                _key: string;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: "customImage";
                _key: string;
              }
          >;
        }
      | {
          _key: string;
          _type: "grid";
          title?: string;
          columns?: Columns;
          items: Array<
            | {
                _key: string;
                _type: "blockContent";
                text?: Array<
                  | {
                      children?: Array<{
                        marks?: Array<string>;
                        text?: string;
                        _type: "span";
                        _key: string;
                      }>;
                      style?:
                        | "blockquote"
                        | "h1"
                        | "h1+center"
                        | "h2"
                        | "h2+center"
                        | "h3"
                        | "h3+center"
                        | "h4"
                        | "h4+center"
                        | "h5"
                        | "h5+center"
                        | "h6"
                        | "h6+center"
                        | "normal"
                        | "normal+center";
                      listItem?: "bullet" | "number";
                      markDefs?: Array<
                        {
                          _key: string;
                        } & Link
                      >;
                      level?: number;
                      _type: "block";
                      _key: string;
                    }
                  | {
                      asset?: {
                        _ref: string;
                        _type: "reference";
                        _weak?: boolean;
                        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                      };
                      hotspot?: SanityImageHotspot;
                      crop?: SanityImageCrop;
                      alt?: string;
                      _type: "customImage";
                      _key: string;
                    }
                >;
                ctas: null;
              }
            | {
                asset?: {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
                };
                hotspot?: SanityImageHotspot;
                crop?: SanityImageCrop;
                alt?: string;
                _type: "mainImage";
                _key: string;
                ctas: null;
              }
            | {
                _key: string;
                _type: "youtube";
                url?: string;
                autoPlay?: boolean;
                muted?: boolean;
                ctas: null;
              }
          > | null;
        }
      | {
          _key: string;
          _type: "mainImage";
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
        }
      | {
          _key: string;
          _type: "youtube";
          url?: string;
          autoPlay?: boolean;
          muted?: boolean;
        }
      | {}
    > | null;
  } | null;
  posts: Array<{
    _id: string;
    _type: "post";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    meta?: MetaFields;
    author?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "person";
    };
    publishedAt?: string;
    keywords?: Array<string>;
    excerpt?: SimpleBlockContent;
    featuredImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "mainImage";
    };
    content?: Array<
      | ({
          _key: string;
        } & BlockContent)
      | ({
          _key: string;
        } & Grid)
      | ({
          _key: string;
        } & Spacer)
      | ({
          _key: string;
        } & Youtube)
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "mainImage";
          _key: string;
        }
    >;
  }>;
};
// Variable: allPagesSlug
// Query: *[_type == 'page' && defined(slug.current) && slug.current != 'frontpage' && slug.current != 'posts'][].slug.current
export type AllPagesSlugResult = Array<string | null>;

// Source: src/lib/sanity/queries/post.ts
// Variable: postQuery
// Query: *[_type == 'post' && slug.current == $slug][0] {    ...,    author-> {name, title, phone, email, image}  }
export type PostQueryResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  meta?: MetaFields;
  author: {
    name: string | null;
    title: string | null;
    phone: string | null;
    email: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  publishedAt?: string;
  keywords?: Array<string>;
  excerpt?: SimpleBlockContent;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "mainImage";
  };
  content?: Array<
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & Grid)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & Youtube)
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "mainImage";
        _key: string;
      }
  >;
} | null;
// Variable: postsQuery
// Query: *[_type == 'post' && defined(slug.current)] | order(_createdAt desc)[0...$limit]
export type PostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  meta?: MetaFields;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "person";
  };
  publishedAt?: string;
  keywords?: Array<string>;
  excerpt?: SimpleBlockContent;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "mainImage";
  };
  content?: Array<
    | ({
        _key: string;
      } & BlockContent)
    | ({
        _key: string;
      } & Grid)
    | ({
        _key: string;
      } & Spacer)
    | ({
        _key: string;
      } & Youtube)
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "mainImage";
        _key: string;
      }
  >;
}>;
// Variable: allPostSlugQuery
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type AllPostSlugQueryResult = Array<{
  slug: string | null;
}>;

// Source: src/lib/sanity/queries/site-settings.ts
// Variable: siteSettingsQuery
// Query: *[_type == "siteSettings"][0]{    ...,    navigation[]{      ...,      link->{_type, slug}    }  }
export type SiteSettingsQueryResult = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  meta?: MetaFields;
  navigation: Array<
    | {
        _key: string;
        _type: "externalLink";
        title?: string;
        slug?: Slug;
        link: null;
      }
    | {
        _key: string;
        _type: "internalLink";
        title?: string;
        link: {
          _type: "page";
          slug: Slug | null;
        } | null;
      }
  > | null;
  socialFields?: SocialFields;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == 'page' && slug.current == $slug][0] {\n    ...,\n    content[] {\n      \n  _type == 'blockContent' => {\n    ...\n  }\n,\n      \n  _type == 'grid' => {\n    ...,\n    items[] {\n      ...,\n      ctas[] {\n        ...,\n        link->{link, slug}\n      }\n    }\n  }\n,\n      \n  _type == 'mainImage' => {\n    ...\n  }\n,\n      \n  _type == 'youtube' => {\n    ...\n  }\n\n    }\n  }\n": PageQueryResult;
    "\n  {\n    \"page\": *[_type == 'page' && slug.current == $slug][0] {\n      ...,\n      content[] {\n        \n  _type == 'blockContent' => {\n    ...\n  }\n,\n        \n  _type == 'grid' => {\n    ...,\n    items[] {\n      ...,\n      ctas[] {\n        ...,\n        link->{link, slug}\n      }\n    }\n  }\n,\n        \n  _type == 'mainImage' => {\n    ...\n  }\n,\n        \n  _type == 'youtube' => {\n    ...\n  }\n\n      }\n    },\n    \"posts\": *[_type == 'post' && defined(slug.current)] | order(_createdAt desc)[0...$limit]\n  }\n": PageWithPostsQueryResult;
    "\n  *[_type == 'page' && defined(slug.current) && slug.current != 'frontpage' && slug.current != 'posts'][].slug.current\n": AllPagesSlugResult;
    "\n  *[_type == 'post' && slug.current == $slug][0] {\n    ...,\n    author-> {name, title, phone, email, image}\n  }\n": PostQueryResult;
    "\n  *[_type == 'post' && defined(slug.current)] | order(_createdAt desc)[0...$limit]\n": PostsQueryResult;
    '\n   *[_type == "post" && defined(slug.current)]{"slug": slug.current}\n': AllPostSlugQueryResult;
    '\n  *[_type == "siteSettings"][0]{\n    ...,\n    navigation[]{\n      ...,\n      link->{_type, slug}\n    }\n  }\n': SiteSettingsQueryResult;
  }
}
